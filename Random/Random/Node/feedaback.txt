To create a feedback form using Node.js, MongoDB, and Express, you can follow the steps outlined below. In this example, I'll use the EJS template engine, but you can choose a different one if you prefer. Make sure you have Node.js, MongoDB, and Express installed in your environment.

1. **Set Up Your Project:**

   Start by creating a new directory for your project and navigate to it using your terminal:

   ```bash
   mkdir feedback-form-app
   cd feedback-form-app
   ```

2. **Initialize Your Project:**

   Initialize a new Node.js project and install the required dependencies:

   ```bash
   npm init -y
   npm install express mongoose ejs body-parser
   ```

3. **Create the Directory Structure:**

   Organize your project into directories. Here's a suggested directory structure:

   ```
   feedback-form-app/
   ├── app.js
   ├── views/
   │   ├── feedback-form.ejs
   ├── public/
   │   ├── styles.css
   ```

4. **Create the Express Application:**

   In your `app.js` file, set up the Express application:

   ```javascript
   const express = require('express');
   const mongoose = require('mongoose');
   const bodyParser = require('body-parser');
   const app = express();

   app.set('view engine', 'ejs');
   app.use(express.static('public'));
   app.use(bodyParser.urlencoded({ extended: true }));

   mongoose.connect('mongodb://localhost/feedback-app', {
       useNewUrlParser: true,
       useUnifiedTopology: true
   });

   // Define a Mongoose schema for the feedback
   const feedbackSchema = new mongoose.Schema({
       name: String,
       email: String,
       message: String
   });

   const Feedback = mongoose.model('Feedback', feedbackSchema);

   // Define the routes
   app.get('/', (req, res) => {
       res.render('feedback-form');
   });

   app.post('/submit', (req, res) => {
       const { name, email, message } = req.body;
       const feedback = new Feedback({ name, email, message });
       feedback.save((err) => {
           if (err) {
               console.error(err);
               res.send('An error occurred. Please try again later.');
           } else {
               res.send('Thank you for your feedback!');
           }
       });
   });

   const PORT = process.env.PORT || 3000;
   app.listen(PORT, () => {
       console.log(`Server is running on port ${PORT}`);
   });
   ```

5. **Create the Feedback Form Template:**

   Create a file named `feedback-form.ejs` in the `views` directory with your feedback form:

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>Feedback Form</title>
       <link rel="stylesheet" type="text/css" href="/styles.css">
   </head>
   <body>
       <h1>Feedback Form</h1>
       <form action="/submit" method="post">
           <label for="name">Name:</label>
           <input type="text" id="name" name="name" required>

           <label for="email">Email:</label>
           <input type="email" id="email" name="email" required>

           <label for="message">Feedback:</label>
           <textarea id="message" name="message" required></textarea>

           <button type="submit">Submit Feedback</button>
       </form>
   </body>
   </html>
   ```

6. **Create a CSS File:**

   Create a file named `styles.css` in the `public` directory to style your feedback form.

7. **Start the Application:**

   Run your Node.js application:

   ```bash
   node app.js
   ```

   Your feedback form will be accessible at `http://localhost:3000/`. Users can submit feedback using the form, and the data will be stored in the MongoDB database.

This example provides a basic feedback form setup. For a production application, you should consider adding user authentication, input validation, and further security measures to protect user data and prevent misuse. Additionally, you may want to enhance the UI and include additional features like data visualization and feedback analysis.