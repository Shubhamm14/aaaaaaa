*PHP*
Creating a PHP script for user registration and secure login is an essential part of many web applications. In this example, I'll guide you through a simplified registration and login system that includes password hashing and user sessions. We'll also implement a basic CAPTCHA to enhance security.

1. **Set Up Your Environment:**

   - You'll need a web server (e.g., Apache), PHP, and a MySQL database.
   - Create a new database for your application.

2. **Create a Database Table:**

   Create a table in your MySQL database to store user information. Here's an example schema:

   ```sql
   CREATE TABLE users (
       id INT AUTO_INCREMENT PRIMARY KEY,
       username VARCHAR(255) NOT NULL,
       email VARCHAR(255) NOT NULL,
       password VARCHAR(255) NOT NULL,
       registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
   );
   ```

3. **Create Registration Form:**

   Create an HTML form in a file named `register.html` to collect user information:

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>User Registration</title>
   </head>
   <body>
       <h2>User Registration</h2>
       <form action="register.php" method="post">
           <input type="text" name="username" placeholder="Username" required>
           <input type="email" name="email" placeholder="Email" required>
           <input type="password" name="password" placeholder="Password" required>
           <input type="password" name="confirm_password" placeholder="Confirm Password" required>
           <!-- Add a CAPTCHA here -->
           <button type="submit">Register</button>
       </form>
   </body>
   </html>
   ```

4. **Create Registration PHP Script:**

   Create a PHP file named `register.php` to handle the registration process:

   ```php
   <?php
   // Database connection code (replace with your credentials)
   $db = new mysqli('localhost', 'username', 'password', 'database_name');

   if ($db->connect_error) {
       die("Connection failed: " . $db->connect_error);
   }

   if (isset($_POST['username']) && isset($_POST['email']) && isset($_POST['password']) && isset($_POST['confirm_password'])) {
       $username = $_POST['username'];
       $email = $_POST['email'];
       $password = password_hash($_POST['password'], PASSWORD_BCRYPT);

       // Perform CAPTCHA verification here (e.g., reCAPTCHA)

       // Check if the email is already registered
       $query = "SELECT id FROM users WHERE email = '$email'";
       $result = $db->query($query);
       if ($result->num_rows > 0) {
           echo "Email is already registered.";
       } else {
           // Insert user data into the database
           $insertQuery = "INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$password')";
           if ($db->query($insertQuery) === TRUE) {
               echo "Registration successful.";
           } else {
               echo "Error: " . $insertQuery . "<br>" . $db->error;
           }
       }
   }

   $db->close();
   ?>
   ```

5. **Create Login Form:**

   Create an HTML form in a file named `login.html` to collect login information:

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>User Login</title>
   </head>
   <body>
       <h2>User Login</h2>
       <form action="login.php" method="post">
           <input type="email" name="email" placeholder="Email" required>
           <input type="password" name="password" placeholder="Password" required>
           <button type="submit">Log In</button>
       </form>
   </body>
   </html>
   ```

6. **Create Login PHP Script:**

   Create a PHP file named `login.php` to handle the login process:

   ```php
   <?php
   session_start();

   // Database connection code (replace with your credentials)
   $db = new mysqli('localhost', 'username', 'password', 'database_name');

   if ($db->connect_error) {
       die("Connection failed: " . $db->connect_error);
   }

   if (isset($_POST['email']) && isset($_POST['password'])) {
       $email = $_POST['email'];
       $password = $_POST['password'];

       // Fetch the user's hashed password from the database based on the email
       $query = "SELECT id, password FROM users WHERE email = '$email'";
       $result = $db->query($query);

       if ($result->num_rows > 0) {
           $row = $result->fetch_assoc();
           if (password_verify($password, $row['password'])) {
               // Login successful
               $_SESSION['user_id'] = $row['id'];
               header("Location: welcome.php"); // Redirect to a welcome page
           } else {
               echo "Invalid password.";
           }
       } else {
           echo "User not found.";
       }
   }

   $db->close();
   ?>
   ```

7. **Create a Welcome Page:**

   Create a PHP file named `welcome.php` to welcome logged-in users.

8. **Enhance Security and Features:**

   - Implement CAPTCHA for registration and login forms.
   - Use prepared statements and validation to protect against SQL injection.
   - Use session management to track user logins and provide a secure experience.
   - You can enhance security further by implementing password reset, user authentication, and more.

Remember that this is a simplified example to get you started. In a production environment, you should follow best practices for security, validation, and user experience. You might also consider using a PHP framework or library for more advanced user authentication and security features.