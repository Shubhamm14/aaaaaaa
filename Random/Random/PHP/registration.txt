Creating a user registration form that collects user information, validates the input, and stores the data in a database is a common task in web development. I'll provide you with a simplified example using PHP and MySQL. Please note that this is a basic implementation, and in a real-world scenario, you should enhance security, add validation, and handle user authentication.

1. **Set Up Your Environment:**

   - Make sure you have a web server (e.g., Apache), PHP, and MySQL installed.
   - Create a new database for your application.

2. **Create a Database Table:**

   Create a table in your MySQL database to store user information. Here's an example schema:

   ```sql
   CREATE TABLE users (
       id INT AUTO_INCREMENT PRIMARY KEY,
       name VARCHAR(255) NOT NULL,
       email VARCHAR(255) NOT NULL,
       password VARCHAR(255) NOT NULL
   );
   ```

3. **Create Registration Form:**

   Create an HTML form in a file named `register.html` to collect user information:

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>User Registration</title>
   </head>
   <body>
       <h2>User Registration</h2>
       <form action="register.php" method="post">
           <input type="text" name="name" placeholder="Name" required>
           <input type="email" name="email" placeholder="Email" required>
           <input type="password" name="password" placeholder="Password" required>
           <button type="submit">Register</button>
       </form>
   </body>
   </html>
   ```

4. **Create Registration PHP Script:**

   Create a PHP file named `register.php` to handle form submission, validate input, and store user data in the database:

   ```php
   <?php
   // Database connection code (replace with your credentials)
   $db = new mysqli('localhost', 'username', 'password', 'database_name');

   if ($db->connect_error) {
       die("Connection failed: " . $db->connect_error);
   }

   if (isset($_POST['name']) && isset($_POST['email']) && isset($_POST['password'])) {
       $name = $_POST['name'];
       $email = $_POST['email'];
       $password = password_hash($_POST['password'], PASSWORD_BCRYPT); // Hash the password for security

       // Validate the email format
       if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
           echo "Invalid email address";
       } else {
           // Check if the email is already registered
           $query = "SELECT id FROM users WHERE email = '$email'";
           $result = $db->query($query);
           if ($result->num_rows > 0) {
               echo "Email is already registered";
           } else {
               // Insert user data into the database
               $insertQuery = "INSERT INTO users (name, email, password) VALUES ('$name', '$email', '$password')";
               if ($db->query($insertQuery) === TRUE) {
                   echo "Registration successful";
               } else {
                   echo "Error: " . $insertQuery . "<br>" . $db->error;
               }
           }
       }
   }

   $db->close();
   ?>
   ```

5. **Test Your Registration Form:**

   - Place the `register.html` file in your web server's document root.
   - Open a web browser and access the registration form at `http://localhost/register.html`.
   - Fill in the registration details and submit the form.

The PHP script will validate the input, check for duplicate emails, and store the user's information in the database if everything is successful. You can customize and enhance this registration process further with additional features, such as password confirmation, CAPTCHA, and user-friendly error messages, for a production-ready registration system.